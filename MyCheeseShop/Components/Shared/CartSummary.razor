@page "/cart"
@inject ShoppingCart ShoppingCart
@inject ProtectedSessionStorage ProtectedSessionStorage
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Model
@inject NavigationManager NavigationManager


<div>
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total</th>
                <th scope="col"></th>
                @if (IsEditable)
                {
                    <th scope="col">Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ShoppingCart.GetItems())
            {
                <tr>
                    <td scope="col">@item.Cheese.Name</td>
                    <td scope="col">@item.Cheese.Price.ToString("C")</td>
                    <td scope="col">@((item.Quantity*100))g</td>
                    <td scope="col">@item.Total.ToString("C")</td>


                    <td scope="col">
                       <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => IncreaseQuantity(item)">+</button>
                       <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => DecreaseQuantity(item)">-</button>
                       <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => RemoveItem(item)">x</button>
                       
                    </td>
                </tr>
            } 
           
        </tbody>
    </table>
</div>
<div class="d-flex justify-content-between">
</div>



@code
{
    [Parameter]
    public bool IsEditable { get; set; } = false;

    protected override void OnInitialized()
    {
        ShoppingCart.OnCartUpdated += async () => await CartUpdated();
    }

    private async Task CartUpdated()
    {
        StateHasChanged();
        await ProtectedSessionStorage.SetAsync("cart", ShoppingCart.GetItems());
    }

    private void RemoveItem(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese);
    }
    private void IncreaseQuantity(CartItem item)
    {
        ShoppingCart.AddItem(item.Cheese, 1);
    }
    private void DecreaseQuantity(CartItem item)
    {
        ShoppingCart.DecreaseItem(item.Cheese, 1);
    }
}









    



