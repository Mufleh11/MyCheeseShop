@page "/checkout"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject ShoppingCart ShoppingCart
@inject OrderProvider OrderProvider
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserProvider UserProvider











<div>
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total</th>
                <th scope="col"></th>
             @*      @if (IsEditable)
                {
                    <th scope="col">Actions</th>
                 *@} 
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ShoppingCart.GetItems())
            {
                <tr>
                    <td scope="col">@item.Cheese.Name</td>
                    <td scope="col">@item.Cheese.Price.ToString("C")</td>
                    <td scope="col">@((item.Quantity * 100))g</td>
                    <td scope="col">@item.Total.ToString("C")</td>


                  @*   <td scope="col">
                        <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => IncreaseQuantity(item)">+</button>
                        <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => DecreaseQuantity(item)">-</button>
                        <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => RemoveItem(item)">x</button>

                    </td> *@
                </tr>
            }

        </tbody>
    </table>
</div>



<EditForm EditContext="editContext" OnValidSubmit="MakePayment">
    <DataAnnotationsValidator />


    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-5">
                <div class="card mt-5">
                    <div class="card-body">
                        <h4 class="card-title text-center">Customer Information</h4>
                        <div class="form-group mb-3 text-center">
                            <label class="form-label">Name</label>
                            <input class="form-control text-center" value="@GetFormattedName(user)" disabled />
                        </div>
                        <div class="form-group mb-3 text-center">
                            <label class="form-label">Address</label>
                            <input class="form-control text-center" value="@GetFormattedAddress(user)" disabled />
                        </div>
                        <div class="form-group mb-3 text-center">
                            <label class="form-label">Email</label>
                            <input class="form-control text-center" value="@user.Email" disabled />
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

<div class="col-lg-6 col-12 mt-lg-1 mt-2">
            <div class="card h-100">
                <div class="card-body bg-light">
                    <h4 class="card-title">Payment</h4>
                    <div class="form-group mb-1">
                        <label class="form-label">Name on card</label>
                        <InputText class="form-control" placeholder="@GetFormattedName(user)" @bind-Value="paymentDetails.NameOnCard" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Card number</label>
                        <InputText class="form-control" placeholder="0000-0000-0000-0000" @bind-Value="paymentDetails.CardNumber" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Expiry Date</label>
                        <InputText class="form-control" placeholder="dd/mm" @bind-Value="paymentDetails.ExpiryDate"  />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Security Code</label>
                        <InputText class="form-control" placeholder="123" @bind-Value="paymentDetails.SecurityCode" />
                    </div>
                </div>
        <button type="submit" class="btn btn-success d-flex align-items-center">
                <span>Purchase</span>
            @if(isPaying)
                {
                    <span>One Second</span>
                }
          </button>
        
    </div>   
</div>


</EditForm>









@code {
    // public bool IsEditable { get; set; } = false;
    private User user;
    private PaymentDetails paymentDetails;
    private EditContext editContext;
    private bool isPaying;

    protected override async Task OnInitializedAsync()
    {
        paymentDetails = new PaymentDetails();
        editContext = new EditContext(paymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
    }
    private async Task MakePayment()
    {
        await StimulatePayment();

        await OrderProvider.CreateOrder(user, ShoppingCart.GetItems());
        ShoppingCart.Clear();
        NavigationManager.NavigateTo("/thanks");
    }

    private async Task StimulatePayment()
    {
        isPaying = true;
        StateHasChanged();
        await Task.Delay(1500);
        isPaying = false;
        StateHasChanged();

    }

    private sealed class PaymentDetails
    {
        [Required]
        public string NameOnCard { get; set;}

        [Required]
        public string CardNumber { get; set; }

        [Required]
        public string ExpiryDate { get; set; }

        [Required]
        public string SecurityCode { get; set; }
    }

    private string GetFormattedName(User user)
    {
        return $"{user.FirstName} {user.LastName}";
    }
    private string GetFormattedAddress(User user)
    {
        return $"{user.Address}{Environment.NewLine}{user.City}{Environment.NewLine}{user.PostCode}";
    }

}