@page "/checkout"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject ShoppingCart ShoppingCart
@inject OrderProvider OrderProvider
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserProvider UserProvider











<div>
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total</th>
                <th scope="col"></th>
                  @if (IsEditable)
                {
                    <th scope="col">Actions</th>
                } 
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ShoppingCart.GetItems())
            {
                <tr>
                    <td scope="col">@item.Cheese.Name</td>
                    <td scope="col">@item.Cheese.Price.ToString("C")</td>
                    <td scope="col">@((item.Quantity * 100))g</td>
                    <td scope="col">@item.Total.ToString("C")</td>


                  @*   <td scope="col">
                        <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => IncreaseQuantity(item)">+</button>
                        <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => DecreaseQuantity(item)">-</button>
                        <button class="btn btn-warning mt-1 mt-md-1" @onclick="() => RemoveItem(item)">x</button>

                    </td> *@
                </tr>
            }

        </tbody>
    </table>
</div>



<EditForm EditContext="editContext" OnValidSubmit="MakePayment">

    <DataAnnotationsValidator />

</EditForm>








@code {
    public bool IsEditable { get; set; } = false;
    private User user;
    private PaymentDetails paymentDetails;
    private EditContext editContext;
    private bool isPaying;
    protected override async Task OnInitializedAsync()
    {
        paymentDetails = new PaymentDetails();
        editContext = new EditContext(paymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
    }
    private async Task MakePayment()
    {
        await StimulatePayment();

        await OrderProvider.CreateOrder(user, ShoppingCart.GetItems());
        ShoppingCart.Clear();
        NavigationManager.NavigateTo("/thankyou");
    }

    private async Task StimulatePayment()
    {
        isPaying = true;
        StateHasChanged();

    }


    private sealed class PaymentDetails
    {
        [Required]
        public string NameOnCard { get; set;}

        [Required]
        public string CardNumber { get; set; }

        [Required]
        public string ExpiryDate { get; set; }

        [Required]
        public string SecurityCode { get; set; }
    }

}