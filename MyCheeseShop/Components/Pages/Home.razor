@page "/"
@inject NavigationManager NavigationManager
@using MyCheeseShop.Components.Account.Shared
@using MyCheeseShop.Components.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@inject CheeseProvider CheeseProvider
@inject ShoppingCart ShoppingCart
<PageTitle>Home</PageTitle>

<h1>Mufleh's Cheese Shop</h1>

@if (cheeses is null)
{
    <p>Loading...</p>
}
else if (!cheeses.Any())
{
    <p> NO CHEESES FOUND!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>
}

<div class="d-grid gap-2 d-md-block">
    <div class="row">
        <div class="col">
            <a @onclick="GoToCart" button type="button" class="btn btn-dark btn-lg  w-100">Cart</a>
        </div>
    </div>
    </div>

 <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-4">
@foreach (var cheese in FilteredCheeses)
{
    <div class="col-md-3">
        <StoreItem Cheese="cheese" />
    </div>
}
</div>

@if (!FilteredCheeses.Any())
{
    <p> No cheeses found</p>
}













@* 
@foreach (var cheese in FilteredCheeses)
        {
            <div class="col">
                <StoreItem Cheese="cheese" />
            </div>
        }
        @if (!FilteredCheeses.Any())
        {
            <p> NO CHEESES FOUND!!!!!!!!!</p>
        } *@




@code 

{
    private string searchTerm = "";
    private IEnumerable<Cheese> cheeses;


    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value;
        }
    }

    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
        cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
        cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
        cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);

    }

    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;

    }




    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }




}






